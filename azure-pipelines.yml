# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: 
- main


pool:
  vmImage: ubuntu-latest




steps:
- script: echo Hello, K8s!
  displayName: 'Running a K8s cluster pipeline'




- task: TerraformTaskV3@3
  inputs:
    provider: 'azurerm'
    command: 'init'
    backendServiceArm: 'CognitiveSubscription (95e910f9-7fcb-4fb8-90a1-d81f3d52cfa9)'
    backendAzureRmResourceGroupName: 'POC'
    backendAzureRmStorageAccountName: 'cloudcoverstorage'
    backendAzureRmContainerName: 'terraformcontainer'
    backendAzureRmKey: 'terraform.tfstate'
    
# - task: TerraformTaskV3@3
#   inputs:
#     provider: 'azurerm'
#     command: 'plan'
#     environmentServiceNameAzureRM: 'CognitiveSubscription (95e910f9-7fcb-4fb8-90a1-d81f3d52cfa9)'

# - task: TerraformTaskV3@3
#   inputs:
#     provider: 'azurerm'
#     command: 'apply'
#     environmentServiceNameAzureRM: 'CognitiveSubscription (95e910f9-7fcb-4fb8-90a1-d81f3d52cfa9)'
     
    
# - task: Kubernetes@1
#   inputs:
#     connectionType: 'Azure Resource Manager'
#     azureSubscriptionEndpoint: 'CognitiveSubscription (95e910f9-7fcb-4fb8-90a1-d81f3d52cfa9)'
#     azureResourceGroup: $(azureResourceGroup)
#     kubernetesCluster: $(kubernetesCluster)
#     command: 'apply'
#     arguments: -f $(System.DefaultWorkingDirectory)/manifest-info.yml
#   displayName: 'Apply kubernetes manifest'  

- task: TerraformTaskV3@3
  inputs:
    provider: 'azurerm'
    command: 'destroy'
    environmentServiceNameAzureRM: 'CognitiveSubscription (95e910f9-7fcb-4fb8-90a1-d81f3d52cfa9)'




# - task: AzureCLI@2
#   inputs:
#     azureSubscription: 'CognitiveSubscription (95e910f9-7fcb-4fb8-90a1-d81f3d52cfa9)'
#     scriptType: 'batch'
#     scriptLocation: 'inlineScript'
#     inlineScript: |
#       echo  $(azureResourceGroup)
#      # helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
     



  
# - task: Gitleaks@2
#   inputs:
#     scanlocation: '$(Build.SourcesDirectory)'
#     configtype: 'predefined'
#     predefinedconfigfile: 'GitleaksUdmCombo.toml'
#     reportformat: 'sarif'

